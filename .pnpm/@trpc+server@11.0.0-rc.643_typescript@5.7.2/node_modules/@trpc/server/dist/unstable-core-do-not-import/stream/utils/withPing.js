'use strict';

var unpromise = require('../../../vendor/unpromise/unpromise.js');
var timerResource = require('./timerResource.js');

const PING_SYM = Symbol('ping');
/**
 * Derives a new {@link AsyncGenerator} based of {@link iterable}, that yields {@link PING_SYM}
 * whenever no value has been yielded for {@link pingIntervalMs}.
 */ async function* withPing(iterable, pingIntervalMs) {
    const iterator = iterable[Symbol.asyncIterator]();
    // declaration outside the loop for garbage collection reasons
    let result;
    let nextPromise = iterator.next();
    while(true){
        const pingPromise = timerResource.timerResource(pingIntervalMs);
        try {
            result = await unpromise.Unpromise.race([
                nextPromise,
                pingPromise.start()
            ]);
            if (result === timerResource.disposablePromiseTimerResult) {
                // cancelled
                yield PING_SYM;
                continue;
            }
            if (result.done) {
                return result.value;
            }
            nextPromise = iterator.next();
            yield result.value;
            // free up reference for garbage collection
            result = null;
        } finally{
            pingPromise[Symbol.dispose]();
        }
    }
}

exports.PING_SYM = PING_SYM;
exports.withPing = withPing;
